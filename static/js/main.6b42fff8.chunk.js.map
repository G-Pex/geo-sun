{"version":3,"sources":["assets/icons/locate.svg","assets/icons/sunrise.svg","assets/icons/sunset.svg","components/global/interactiveIcon.jsx","components/global/inputWithIcon.jsx","components/sunTimes/api.js","components/sunTimes/sunTimes.jsx","utils/index.jsx","components/header/header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","IconSvg","styled","svg","props","height","width","margin","left","right","padding","top","bottom","hoverHeight","hoverWidth","InteractiveIcon","svgClass","fillColour","lineColour","margins","paddings","xlinkHref","fill","line","TextBoxContainer","div","TextBoxInput","input","IconPosition","InputWithIcon","maxHeight","maxWidth","iconProps","placeholderText","isDisabled","updateFunc","placeholder","disabled","onChange","e","currentTarget","value","onClick","onClickFunc","mapBoxAccessToken","callMapBoxApi","searchString","a","fetch","then","res","json","features","address","error","getSunTimes","lat","lng","url","response","SunTimesContainer","InputBoxes","Button","button","SunTimes","useState","location","setLocation","sunriseTime","setSunriseTime","sunsetTime","setSunsetTime","defaultInputProps","defaultIconProps","results","center","sunRiseSetTimes","sunrise","sunset","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","place_name","locate","requestUserLocation","fetchTimes","length","defaultTheme","primary","secondary","font_family","HeaderContainer","HeaderTitle","h1","key","theme","tryTheme","Header","title","AppContainer","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6b42fff8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/locate.6a110ff3.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.2de64360.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.57164aa6.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst IconSvg = styled.svg`\r\n  position: relative;\r\n\r\n  height: ${props => props.height}px;\r\n  width: ${props => props.width}px;\r\n\r\n  margin-left: ${props => props.margin.left};\r\n  margin-right: ${props => props.margin.right};\r\n\r\n  padding-top: ${props => props.padding.top}px;\r\n  padding-bottom: ${props => props.padding.bottom}px;\r\n  padding-left: ${props => props.padding.left}px;\r\n  padding-right: ${props => props.padding.right}px;\r\n\r\n  :hover {\r\n    height: ${props =>\r\n      props.hoverHeight ? props.hoverHeight : props.height}px;\r\n    width: ${props => (props.hoverWidth ? props.hoverWidth : props.width)}px;\r\n  }\r\n`;\r\n\r\nexport default function InteractiveIcon(props) {\r\n  const {\r\n    height,\r\n    width,\r\n    hoverHeight,\r\n    hoverWidth,\r\n    svg,\r\n    svgClass,\r\n    fillColour,\r\n    lineColour,\r\n    margins,\r\n    paddings,\r\n  } = props;\r\n\r\n  // If margins not supplied use auto left/right\r\n  let margin = margins || { left: 'auto', right: 'auto' };\r\n\r\n  //If paddings not supplied default all to 0\r\n  let padding = paddings || { top: 0, bottom: 0, left: 0, right: 0 };\r\n  return (\r\n    <IconSvg\r\n      height={height ? height : 30}\r\n      width={width ? width : 30}\r\n      hoverHeight={hoverHeight}\r\n      hoverWidth={hoverWidth}\r\n      margin={margin}\r\n      padding={padding}\r\n    >\r\n      <use xlinkHref={svg + svgClass} fill={fillColour} line={lineColour} />\r\n    </IconSvg>\r\n  );\r\n}\r\n\r\nInteractiveIcon.propTypes = ({ object, string, number } = PropTypes) => {\r\n  return {\r\n    /* The SVG graphic used by the icon*/\r\n    svg: object,\r\n    /* The SVG class used to override styles*/\r\n    svgClass: string,\r\n    /* The colour used to override the style 'fill' */\r\n    fillColour: string,\r\n    /* The colour used to override the style 'line' */\r\n    lineColour: string,\r\n    /* The margins of the icon */\r\n    margins: object,\r\n    /* The paddings of the icon */\r\n    paddings: object,\r\n    /* The height in px of the icon */\r\n    height: number,\r\n    /* The width in px of the icon */\r\n    width: number,\r\n    /* The height in px of the icon when mouse hovers over */\r\n    hoverHeight: number,\r\n    /* The width in px of the icon when mouse hovers over */\r\n    hoverWidth: number,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport InteractiveIcon from './interactiveIcon';\r\n\r\nconst TextBoxContainer = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  height: ${props => props.height}px;\r\n  width: ${props => props.width}px;\r\n\r\n  margin-left: ${props => props.margin.left};\r\n  margin-right: ${props => props.margin.right};\r\n\r\n  padding-top: ${props => props.padding.top}px;\r\n  padding-bottom: ${props => props.padding.bottom}px;\r\n  padding-left: ${props => props.padding.left}px;\r\n  padding-right: ${props => props.padding.right}px;\r\n`;\r\nconst TextBoxInput = styled.input`\r\n  height: 100%;\r\n  width: 100%;\r\n  text-align: center;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst IconPosition = styled.div`\r\n  position: absolute;\r\n  height: 100%;\r\n  width: auto;\r\n  right: 5px;\r\n`;\r\n\r\nexport default function InputWithIcon(props) {\r\n  const {\r\n    height,\r\n    width,\r\n    maxHeight,\r\n    maxWidth,\r\n    margins,\r\n    paddings,\r\n    iconProps,\r\n    placeholderText,\r\n    isDisabled,\r\n    updateFunc,\r\n  } = props;\r\n\r\n  // If margins not supplied use auto left/right and 5px top/bottom\r\n  let margin = margins || { left: 'auto', right: 'auto', top: 5, bottom: 5 };\r\n\r\n  //If paddings not supplied default all to 0\r\n  let padding = paddings || { top: 0, bottom: 0, left: 0, right: 0 };\r\n\r\n  return (\r\n    <TextBoxContainer\r\n      height={height || 50}\r\n      width={width || 300}\r\n      maxHeight={maxHeight || 50}\r\n      maxWidth={maxWidth || 300}\r\n      margin={margin}\r\n      padding={padding}\r\n    >\r\n      <TextBoxInput\r\n        placeholder={placeholderText || ''}\r\n        disabled={isDisabled}\r\n        onChange={e => updateFunc(e.currentTarget.value)}\r\n      />\r\n      {iconProps && (\r\n        <IconPosition onClick={() => iconProps.onClickFunc()}>\r\n          <InteractiveIcon {...iconProps} />\r\n        </IconPosition>\r\n      )}\r\n    </TextBoxContainer>\r\n  );\r\n}\r\n\r\nInputWithIcon.propTypes = ({\r\n  number,\r\n  object,\r\n  string,\r\n  bool,\r\n  func,\r\n} = PropTypes) => {\r\n  return {\r\n    /* The height of the textbox */\r\n    height: number,\r\n    /* The width of the textbox */\r\n    width: number,\r\n    /* The height of the textbox */\r\n    maxHeight: number,\r\n    /* The width of the textbox */\r\n    maxWidth: number,\r\n    /* The margins of the textbox */\r\n    margins: object,\r\n    /* The paddings of the textbox */\r\n    paddings: object,\r\n    /* The optional props for an icon */\r\n    iconProps: object,\r\n    /* The placeholder message for the input */\r\n    placeholderText: string,\r\n    /* If the input is disabled */\r\n    isDisabled: bool,\r\n    /* Callback function to capture input value */\r\n    updateFunc: func,\r\n  };\r\n};\r\n","const mapBoxAccessToken =\r\n  'pk.eyJ1IjoiZ3BoZXgiLCJhIjoiY2sxOTN5b3Y5MHlyazNsbXJiNXlqaWxpciJ9.maDa-fTI1_chmXtcMZh3lw';\r\n\r\nasync function callMapBoxApi(searchString) {\r\n  try {\r\n    return await fetch(\r\n      `https://api.mapbox.com/geocoding/v5/mapbox.places/${searchString}.json?access_token=${mapBoxAccessToken}`\r\n    )\r\n      .then(res => res.json())\r\n      .then(res => res.features)\r\n      .then(address => {\r\n        if (address)\r\n          return {\r\n            address,\r\n          };\r\n        else return { error: 'No Address Found' };\r\n      });\r\n  } catch (error) {\r\n    return { error };\r\n  }\r\n}\r\n\r\nasync function getSunTimes(lat, lng) {\r\n  let url = `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=today`;\r\n  const response = await fetch(url).then(res => res.json());\r\n  return response;\r\n}\r\n\r\nexport { callMapBoxApi, getSunTimes };\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport InputWithIcon from 'components/global/inputWithIcon';\r\nimport locate from '../../assets/icons/locate.svg';\r\nimport sunrise from '../../assets/icons/sunrise.svg';\r\nimport sunset from '../../assets/icons/sunset.svg';\r\nimport { callMapBoxApi, getSunTimes } from './api';\r\n\r\nconst SunTimesContainer = styled.div`\r\n  height: calc(100% - 100px);\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  border: 1px solid grey;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst InputBoxes = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  height: 400px;\r\n  width: 100%;\r\n  border-radius: 5px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  max-width: 300px;\r\n  height: 40px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background-color: white;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default function SunTimes() {\r\n  const [location, setLocation] = useState('');\r\n  const [sunriseTime, setSunriseTime] = useState(null);\r\n  const [sunsetTime, setSunsetTime] = useState(null);\r\n\r\n  const defaultInputProps = { height: 60, width: 400 };\r\n  const defaultIconProps = {\r\n    height: 30,\r\n    width: 30,\r\n    paddings: { top: 20 },\r\n  };\r\n\r\n  async function fetchTimes() {\r\n    const results = await callMapBoxApi(location);\r\n    const sunRiseSetTimes = await getSunTimes(\r\n      results.address[0].center[1],\r\n      results.address[0].center[0]\r\n    );\r\n    setSunriseTime(sunRiseSetTimes.results.sunrise);\r\n    setSunsetTime(sunRiseSetTimes.results.sunset);\r\n  }\r\n\r\n  async function requestUserLocation() {\r\n    navigator.geolocation.getCurrentPosition(async function(position) {\r\n      const response = await callMapBoxApi(\r\n        `${position.coords.longitude},${position.coords.latitude}`\r\n      );\r\n      return setLocation(response.address[0].place_name);\r\n    });\r\n  }\r\n  function getLocationInput() {\r\n    return {\r\n      ...defaultInputProps,\r\n      placeholderText: location || 'Please enter your location',\r\n      updateFunc: value => setLocation(value),\r\n      iconProps: {\r\n        ...defaultIconProps,\r\n        svg: locate,\r\n        svgClass: '#locate',\r\n        onClickFunc: () => requestUserLocation(),\r\n      },\r\n    };\r\n  }\r\n  function getSunriseInput() {\r\n    return {\r\n      ...defaultInputProps,\r\n      placeholderText: sunriseTime || 'Sunrise time will appear here',\r\n      isDisabled: true,\r\n      iconProps: {\r\n        ...defaultIconProps,\r\n        svg: sunrise,\r\n        svgClass: '#sunrise',\r\n      },\r\n    };\r\n  }\r\n  function getSunsetInput() {\r\n    return {\r\n      ...defaultInputProps,\r\n      placeholderText: sunsetTime || 'Sunset time will appear here',\r\n      isDisabled: true,\r\n      iconProps: {\r\n        ...defaultIconProps,\r\n        svg: sunset,\r\n        svgClass: '#sunset',\r\n      },\r\n    };\r\n  }\r\n  return (\r\n    <SunTimesContainer>\r\n      <InputBoxes>\r\n        <InputWithIcon {...getLocationInput()} />\r\n        <Button onClick={() => fetchTimes()} disabled={location.length < 3}>\r\n          Get Sunrise and Sunset Times\r\n        </Button>\r\n        <InputWithIcon {...getSunriseInput()} />\r\n        <InputWithIcon {...getSunsetInput()} />\r\n      </InputBoxes>\r\n    </SunTimesContainer>\r\n  );\r\n}\r\n","const defaultTheme = {\r\n  // Colours\r\n  primary: 'white',\r\n  secondary: 'black',\r\n\r\n  font_family: \"'Raleway', sans-serif\",\r\n};\r\n\r\nfunction tryTheme(props, key) {\r\n  const theme = props.theme || defaultTheme;\r\n  return theme[key] || key;\r\n}\r\n\r\nexport { tryTheme, defaultTheme };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { tryTheme } from '../../utils/index';\r\n\r\nconst HeaderContainer = styled.div`\r\n  position: relative;\r\n  height: 100px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst HeaderTitle = styled.h1`\r\n  font-family: ${props => tryTheme(props, 'font_family')};\r\n`;\r\n\r\nexport function Header(props) {\r\n  const { title } = props;\r\n  return (\r\n    <HeaderContainer>\r\n      <HeaderTitle>{title}</HeaderTitle>\r\n    </HeaderContainer>\r\n  );\r\n}\r\nHeader.propTypes = ({ string } = PropTypes) => {\r\n  return {\r\n    /* The title text */\r\n    title: string,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport SunTimes from 'components/sunTimes/sunTimes';\r\nimport { Header } from 'components/header/header';\r\nimport { defaultTheme } from './utils/index';\r\n\r\nconst AppContainer = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <AppContainer>\r\n        <Header title={'Local Sunrise and Sunset Times'}></Header>\r\n        <SunTimes />\r\n      </AppContainer>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}