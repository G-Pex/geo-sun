{"version":3,"sources":["assets/icons/locate.svg","assets/icons/sunrise.svg","assets/icons/sunset.svg","assets/sunrise.jpg","components/global/interactiveIcon.jsx","components/global/inputWithIcon.jsx","components/sunTimes/api.js","components/global/loading.jsx","components/global/error.jsx","components/sunTimes/sunTimes.jsx","utils/index.jsx","components/header/header.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","IconSvg","styled","svg","props","height","width","margin","left","right","padding","top","bottom","hoverHeight","hoverWidth","InteractiveIcon","svgClass","fillColour","lineColour","margins","paddings","xlinkHref","fill","line","TextBoxContainer","div","TextBoxInput","input","IconPosition","InputWithIcon","maxHeight","maxWidth","iconProps","placeholderText","isDisabled","updateFunc","placeholder","disabled","onChange","e","currentTarget","value","onClick","onClickFunc","mapBoxAccessToken","callMapBoxApi","searchString","a","fetch","then","res","json","features","address","error","getSunTimes","lat","lng","url","LoadingBackground","LoadingAnimation","Loading","ErrorContainer","ErrorMessage","h2","Error","closeFunc","console","log","SunTimesContainer","InputBoxes","bgImg","Button","button","SunTimes","useState","location","setLocation","sunriseTime","setSunriseTime","sunsetTime","setSunsetTime","isLoading","setIsLoading","errorMessage","setErrorMessage","response","center","sunRiseSetTimes","results","sunrise","sunset","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","place_name","split","defaultInputProps","defaultIconProps","sunriseImg","locate","requestUserLocation","fetchTimes","length","defaultTheme","primary","secondary","font_family","HeaderContainer","HeaderTitle","h1","key","theme","tryTheme","Header","title","AppContainer","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.676cd001.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/locate.6a110ff3.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.2de64360.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.57164aa6.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.3cbcf2bf.jpg\";","/**\r\n *\r\n * @summary A configurable svg icon component\r\n * @description A configurable icon component using an SVG file (svg id must be provided as #className)\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst IconSvg = styled.svg`\r\n  position: relative;\r\n\r\n  height: ${props => props.height}px;\r\n  width: ${props => props.width}px;\r\n\r\n  margin-left: ${props => props.margin.left};\r\n  margin-right: ${props => props.margin.right};\r\n\r\n  padding-top: ${props => props.padding.top}px;\r\n  padding-bottom: ${props => props.padding.bottom}px;\r\n  padding-left: ${props => props.padding.left}px;\r\n  padding-right: ${props => props.padding.right}px;\r\n\r\n  :hover {\r\n    height: ${props =>\r\n      props.hoverHeight ? props.hoverHeight : props.height}px;\r\n    width: ${props => (props.hoverWidth ? props.hoverWidth : props.width)}px;\r\n  }\r\n`;\r\n\r\nexport default function InteractiveIcon(props) {\r\n  const {\r\n    height,\r\n    width,\r\n    hoverHeight,\r\n    hoverWidth,\r\n    svg,\r\n    svgClass, // provide svg id to override styles\r\n    fillColour,\r\n    lineColour,\r\n    margins,\r\n    paddings,\r\n  } = props;\r\n\r\n  // If margins not supplied use auto left/right\r\n  let margin = margins || { left: 'auto', right: 'auto' };\r\n\r\n  //If paddings not supplied default all to 0\r\n  let padding = paddings || { top: 0, bottom: 0, left: 0, right: 0 };\r\n  return (\r\n    <IconSvg\r\n      height={height ? height : 30}\r\n      width={width ? width : 30}\r\n      hoverHeight={hoverHeight}\r\n      hoverWidth={hoverWidth}\r\n      margin={margin}\r\n      padding={padding}\r\n    >\r\n      <use xlinkHref={svg + svgClass} fill={fillColour} line={lineColour} />\r\n    </IconSvg>\r\n  );\r\n}\r\n\r\nInteractiveIcon.propTypes = ({ object, string, number } = PropTypes) => {\r\n  return {\r\n    /* The SVG graphic used by the icon*/\r\n    svg: object,\r\n    /* The SVG class used to override styles*/\r\n    svgClass: string,\r\n    /* The colour used to override the style 'fill' */\r\n    fillColour: string,\r\n    /* The colour used to override the style 'line' */\r\n    lineColour: string,\r\n    /* The margins of the icon */\r\n    margins: object,\r\n    /* The paddings of the icon */\r\n    paddings: object,\r\n    /* The height in px of the icon */\r\n    height: number,\r\n    /* The width in px of the icon */\r\n    width: number,\r\n    /* The height in px of the icon when mouse hovers over */\r\n    hoverHeight: number,\r\n    /* The width in px of the icon when mouse hovers over */\r\n    hoverWidth: number,\r\n  };\r\n};\r\n","/**\r\n *\r\n * @summary An configurable input component with an optional icon\r\n * @description An customisable input with onChange callback function and optional icon\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport InteractiveIcon from './interactiveIcon';\r\n\r\nconst TextBoxContainer = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  height: ${props => props.height}px;\r\n  width: ${props => props.width}px;\r\n\r\n  margin-left: ${props => props.margin.left};\r\n  margin-right: ${props => props.margin.right};\r\n\r\n  padding-top: ${props => props.padding.top}px;\r\n  padding-bottom: ${props => props.padding.bottom}px;\r\n  padding-left: ${props => props.padding.left}px;\r\n  padding-right: ${props => props.padding.right}px;\r\n`;\r\nconst TextBoxInput = styled.input`\r\n  height: 100%;\r\n  width: 95%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  text-align: center;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  :disabled {\r\n    background-color: white;\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\nconst IconPosition = styled.div`\r\n  position: absolute;\r\n  height: 100%;\r\n  width: auto;\r\n  right: 5px;\r\n`;\r\n\r\nexport default function InputWithIcon(props) {\r\n  const {\r\n    height,\r\n    width,\r\n    maxHeight,\r\n    maxWidth,\r\n    margins,\r\n    paddings,\r\n    iconProps,\r\n    placeholderText,\r\n    isDisabled,\r\n    updateFunc,\r\n  } = props;\r\n\r\n  // If margins not supplied use auto left/right and 5px top/bottom\r\n  let margin = margins || { left: 'auto', right: 'auto', top: 5, bottom: 5 };\r\n\r\n  //If paddings not supplied default all to 0\r\n  let padding = paddings || { top: 0, bottom: 0, left: 0, right: 0 };\r\n\r\n  return (\r\n    <TextBoxContainer\r\n      height={height || 50}\r\n      width={width || 300}\r\n      maxHeight={maxHeight || 50}\r\n      maxWidth={maxWidth || 300}\r\n      margin={margin}\r\n      padding={padding}\r\n    >\r\n      <TextBoxInput\r\n        placeholder={placeholderText || ''}\r\n        disabled={isDisabled}\r\n        onChange={e => updateFunc(e.currentTarget.value)}\r\n      />\r\n      {iconProps && (\r\n        <IconPosition onClick={() => iconProps.onClickFunc()}>\r\n          <InteractiveIcon {...iconProps} />\r\n        </IconPosition>\r\n      )}\r\n    </TextBoxContainer>\r\n  );\r\n}\r\n\r\nInputWithIcon.propTypes = ({\r\n  number,\r\n  object,\r\n  string,\r\n  bool,\r\n  func,\r\n} = PropTypes) => {\r\n  return {\r\n    /* The height of the textbox */\r\n    height: number,\r\n    /* The width of the textbox */\r\n    width: number,\r\n    /* The height of the textbox */\r\n    maxHeight: number,\r\n    /* The width of the textbox */\r\n    maxWidth: number,\r\n    /* The margins of the textbox */\r\n    margins: object,\r\n    /* The paddings of the textbox */\r\n    paddings: object,\r\n    /* The optional props for an icon */\r\n    iconProps: object,\r\n    /* The placeholder message for the input */\r\n    placeholderText: string,\r\n    /* If the input is disabled */\r\n    isDisabled: bool,\r\n    /* Callback function to capture input value */\r\n    updateFunc: func,\r\n  };\r\n};\r\n","const mapBoxAccessToken =\r\n  'pk.eyJ1IjoiZ3BoZXgiLCJhIjoiY2sxOTN5b3Y5MHlyazNsbXJiNXlqaWxpciJ9.maDa-fTI1_chmXtcMZh3lw';\r\n\r\n/**\r\n * Calls the mapbox places api with the provided searchString\r\n * @param {*} searchString : The search string to be queried\r\n * @returns The mapbox API response object or error\r\n */\r\nasync function callMapBoxApi(searchString) {\r\n  try {\r\n    return await fetch(\r\n      `https://api.mapbox.com/geocoding/v5/mapbox.places/${searchString}.json?access_token=${mapBoxAccessToken}`\r\n    )\r\n      .then(res => res.json())\r\n      .then(res => res.features)\r\n      .then(address => {\r\n        if (address)\r\n          return {\r\n            address,\r\n          };\r\n        else return { error: 'No Address Found' };\r\n      });\r\n  } catch (error) {\r\n    return { error };\r\n  }\r\n}\r\n\r\n/**\r\n * Calls the sunrise-sunset api with the provided latitude and longitude\r\n * @param {*} lat : The latitude to be queried\r\n * @param {*} lng : The longitude to be queried\r\n * @returns The  response object or error\r\n */\r\nasync function getSunTimes(lat, lng) {\r\n  try {\r\n    let url = `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=today`;\r\n    return await fetch(url).then(res => res.json());\r\n  } catch (error) {\r\n    return { error };\r\n  }\r\n}\r\n\r\nexport { callMapBoxApi, getSunTimes };\r\n","/**\r\n *\r\n * @summary A loading spinner\r\n * @description A loading spinner which acts as an overlay to the parent component\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst LoadingBackground = styled.div`\r\n  z-index: 2;\r\n  position: absolute;\r\n  background-color: white;\r\n  opacity: 0.7;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\nconst LoadingAnimation = styled.div`\r\n  border: 16px solid #f3f3f3;\r\n  border-radius: 50%;\r\n  border-top: 16px solid black;\r\n  width: 60px;\r\n  height: 60px;\r\n  -webkit-animation: spin 1s linear infinite; /* Safari */\r\n  animation: spin 1s linear infinite;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n/* Safari */\r\n@-webkit-keyframes spin {\r\n  0% { -webkit-transform: rotate(0deg); }\r\n  100% { -webkit-transform: rotate(360deg); }\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n`;\r\nexport default function Loading() {\r\n  return (\r\n    <LoadingBackground>\r\n      <LoadingAnimation />\r\n    </LoadingBackground>\r\n  );\r\n}\r\n","/**\r\n *\r\n * @summary An error message overlay\r\n * @description An error message overlay which acts as an overlay to the parent component\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ErrorContainer = styled.div`\r\n  z-index: 2;\r\n  position: absolute;\r\n  background-color: white;\r\n  opacity: 0.8;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n\r\nconst ErrorMessage = styled.h2`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nexport default function Error(props) {\r\n  const { error, closeFunc } = props;\r\n  console.log('error', error);\r\n  return (\r\n    <ErrorContainer onClick={() => closeFunc()}>\r\n      <ErrorMessage>{`${error}`}</ErrorMessage>\r\n    </ErrorContainer>\r\n  );\r\n}\r\nError.propTypes = ({ string, func } = PropTypes) => {\r\n  return {\r\n    /* The error message */\r\n    error: string,\r\n    /* The close function*/\r\n    closeFunc: func,\r\n  };\r\n};\r\n","/**\r\n *\r\n * @summary The Sunrise/Sunset times component\r\n * @description Using the user geolocation or user provided location, displays the sunrise and sunset times\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport InputWithIcon from 'components/global/inputWithIcon';\r\nimport locate from '../../assets/icons/locate.svg';\r\nimport sunrise from '../../assets/icons/sunrise.svg';\r\nimport sunset from '../../assets/icons/sunset.svg';\r\nimport { callMapBoxApi, getSunTimes } from './api';\r\nimport sunriseImg from '../../assets/sunrise.jpg';\r\nimport Loading from 'components/global/loading';\r\nimport Error from 'components/global/error';\r\n\r\nconst SunTimesContainer = styled.div`\r\n  height: calc(100% - 100px);\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst InputBoxes = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  height: 450px;\r\n  max-width: 100%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border-radius: 5px;\r\n  box-sizing: border-box;\r\n  background-image: url(${props => props.bgImg});\r\n  background-repeat: no-repeat;\r\n  border: 1px solid yellow;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: 320px;\r\n  height: 40px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background-color: white;\r\n  border: 1px solid grey;\r\n  border-radius: 5px;\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default function SunTimes() {\r\n  const [location, setLocation] = useState('');\r\n  const [sunriseTime, setSunriseTime] = useState(null);\r\n  const [sunsetTime, setSunsetTime] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  /**\r\n   * Gets the sunrise/sunset times\r\n   */\r\n  async function fetchTimes() {\r\n    setIsLoading(true);\r\n    // Get the geolocation data from mapbox api\r\n    const response = await callMapBoxApi(location);\r\n    if (response.error) {\r\n      setIsLoading(false);\r\n      return setErrorMessage(response.error);\r\n    }\r\n\r\n    try {\r\n      // Get the sun rise/set times from api\r\n      const sunRiseSetTimes = await getSunTimes(\r\n        response.address[0].center[1],\r\n        response.address[0].center[0]\r\n      );\r\n      // Set state with returned values\r\n      setSunriseTime(sunRiseSetTimes.results.sunrise + ' GMT');\r\n      setSunsetTime(sunRiseSetTimes.results.sunset + ' GMT');\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      return setErrorMessage('No addresses returned');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Requests to use the users location, calls mapbox api to get address for input value\r\n   */\r\n  async function requestUserLocation() {\r\n    setIsLoading(true);\r\n\r\n    navigator.geolocation.getCurrentPosition(async function(position) {\r\n      // Get address data using user geolocation\r\n      const response = await callMapBoxApi(\r\n        `${position.coords.longitude},${position.coords.latitude}`\r\n      );\r\n      if (response.error) {\r\n        setIsLoading(false);\r\n        return setErrorMessage(response.error);\r\n      }\r\n      try {\r\n        const address = response.address[0].place_name.split(',');\r\n        // Set value of location input to returned address\r\n        return setLocation(`${address[0]}, ${address[1]}, ${address[2]}`);\r\n      } catch (error) {\r\n        setIsLoading(false);\r\n        return setErrorMessage('No addresses returned');\r\n      }\r\n    });\r\n    setIsLoading(false);\r\n  }\r\n\r\n  // The default props for all inputs\r\n  const defaultInputProps = { height: 60, width: 350 };\r\n\r\n  // The default props for all input icons\r\n  const defaultIconProps = {\r\n    height: 30,\r\n    width: 30,\r\n    paddings: { top: 20, right: 10 },\r\n  };\r\n\r\n  /**\r\n   * Returns the props of the Location Input Box\r\n   */\r\n  function getLocationInput() {\r\n    return {\r\n      ...defaultInputProps,\r\n      placeholderText: location || 'Please enter your location',\r\n      updateFunc: value => setLocation(value),\r\n      iconProps: {\r\n        ...defaultIconProps,\r\n        svg: locate,\r\n        svgClass: '#locate',\r\n        onClickFunc: () => requestUserLocation(),\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the props of the Sunrise Input Box\r\n   */\r\n  function getSunriseInput() {\r\n    return {\r\n      ...defaultInputProps,\r\n      placeholderText: sunriseTime || 'Sunrise time will appear here',\r\n      isDisabled: true,\r\n      iconProps: {\r\n        ...defaultIconProps,\r\n        svg: sunrise,\r\n        svgClass: '#sunrise',\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns the props of the Sunset Input Box\r\n   */\r\n  function getSunsetInput() {\r\n    return {\r\n      ...defaultInputProps,\r\n      placeholderText: sunsetTime || 'Sunset time will appear here',\r\n      isDisabled: true,\r\n      iconProps: {\r\n        ...defaultIconProps,\r\n        svg: sunset,\r\n        svgClass: '#sunset',\r\n      },\r\n    };\r\n  }\r\n  return (\r\n    <SunTimesContainer>\r\n      <InputBoxes bgImg={sunriseImg}>\r\n        {isLoading && <Loading />}\r\n        {errorMessage && (\r\n          <Error error={errorMessage} closeFunc={() => setErrorMessage(null)} />\r\n        )}\r\n        <InputWithIcon {...getLocationInput()} />\r\n        <Button onClick={() => fetchTimes()} disabled={location.length < 3}>\r\n          Get Sunrise and Sunset Times\r\n        </Button>\r\n        <InputWithIcon {...getSunriseInput()} />\r\n        <InputWithIcon {...getSunsetInput()} />\r\n      </InputBoxes>\r\n    </SunTimesContainer>\r\n  );\r\n}\r\n","/**\r\n *\r\n * @summary Global utitils and constants\r\n * @description  Any useful utility or constant which can be used globally\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nconst defaultTheme = {\r\n  // Colours\r\n  primary: 'white',\r\n  secondary: 'black',\r\n\r\n  font_family: \"'Raleway', sans-serif\",\r\n};\r\n\r\nfunction tryTheme(props, key) {\r\n  const theme = props.theme || defaultTheme;\r\n  return theme[key] || key;\r\n}\r\n\r\nexport { tryTheme, defaultTheme };\r\n","/**\r\n *\r\n * @summary A simple header component\r\n * @description A simple header component with an h1 title\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { tryTheme } from '../../utils/index';\r\n\r\nconst HeaderContainer = styled.div`\r\n  position: relative;\r\n  height: 90px;\r\n  max-width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst HeaderTitle = styled.h1`\r\n  font-family: ${props => tryTheme(props, 'font_family')};\r\n  color: black;\r\n  /* \r\n  ##Device = Desktops\r\n  ##Screen = 1281px to higher resolution desktops\r\n*/\r\n\r\n  @media (min-width: 1281px) {\r\n    font-size: 30px;\r\n  }\r\n\r\n  /* \r\n  ##Device = Laptops, Desktops\r\n  ##Screen = B/w 1025px to 1280px\r\n*/\r\n\r\n  @media (min-width: 1025px) and (max-width: 1280px) {\r\n    font-size: 24px;\r\n  }\r\n\r\n  /* \r\n  ##Device = Tablets, Ipads (portrait)\r\n  ##Screen = B/w 768px to 1024px\r\n*/\r\n\r\n  @media (min-width: 768px) and (max-width: 1024px) {\r\n    font-size: 22px;\r\n  }\r\n\r\n  /* \r\n  ##Device = Tablets, Ipads (landscape)\r\n  ##Screen = B/w 768px to 1024px\r\n*/\r\n\r\n  @media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {\r\n    font-size: 26px;\r\n  }\r\n\r\n  /* \r\n  ##Device = Low Resolution Tablets, Mobiles (Landscape)\r\n  ##Screen = B/w 481px to 767px\r\n*/\r\n\r\n  @media (min-width: 481px) and (max-width: 767px) {\r\n    font-size: 24px;\r\n  }\r\n\r\n  /* \r\n  ##Device = Most of the Smartphones Mobiles (Portrait)\r\n  ##Screen = B/w 320px to 479px\r\n*/\r\n\r\n  @media (min-width: 320px) and (max-width: 480px) {\r\n    font-size: 24px;\r\n  }\r\n`;\r\n\r\nexport function Header(props) {\r\n  const { title } = props;\r\n  return (\r\n    <HeaderContainer>\r\n      <HeaderTitle>{title}</HeaderTitle>\r\n    </HeaderContainer>\r\n  );\r\n}\r\nHeader.propTypes = ({ string } = PropTypes) => {\r\n  return {\r\n    /* The title text */\r\n    title: string,\r\n  };\r\n};\r\n","/**\r\n *\r\n * @summary Sunrise and Sunset Times App\r\n * @description  The root of the Application\r\n * @author Gareth Perry <garethnperry@gmail.com>\r\n *\r\n * @version 1.0.0 (June 2020)\r\n */\r\n\r\nimport React from 'react';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport SunTimes from 'components/sunTimes/sunTimes';\r\nimport { Header } from 'components/header/header';\r\nimport { defaultTheme } from './utils/index';\r\n\r\nconst AppContainer = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n  width: 100%;\r\n  max-width: 1024px;\r\n  border-left: yellow;\r\n  border-right: yellow;\r\n  background-color: #ffaa00;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <AppContainer>\r\n        <Header title={'Local Sunrise and Sunset Times'}></Header>\r\n        <SunTimes />\r\n      </AppContainer>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}